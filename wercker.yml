# This references the default golang container from
# the Docker Hub: https://registry.hub.docker.com/u/library/golang/
# If you want Google's container you would reference google/golang
# Read more about containers on our dev center
# http://devcenter.wercker.com/docs/containers/index.html
box: golang
# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# http://devcenter.wercker.com/docs/pipelines/index.html

# You can also use services such as databases. Read more on our dev center:
# http://devcenter.wercker.com/docs/services/index.html
# services:
    # - postgres
    # http://devcenter.wercker.com/docs/services/postgresql.html

    # - mongo
    # http://devcenter.wercker.com/docs/services/mongodb.html
build:
  # The steps that will be executed on build
  # Steps make up the actions in your pipeline
  # Read more about steps on our dev center:
  # http://devcenter.wercker.com/docs/steps/index.html
  services:
    - id: mysql
      env:
        MYSQL_ROOT_PASSWORD: cohesion
        MYSQL_USER: cohesion
        MYSQL_PASSWORD: cohesion
        MYSQL_DATABASE: cohesion

  steps:
    # Sets the go workspace and places you package
    # at the right place in the workspace tree
    - setup-go-workspace:
        package-dir: github.com/cohesion-education/api

    - script:
        name: env
        code: env

    # Gets the dependencies
    - script:
        name: glide install
        code: |
          go get -u github.com/Masterminds/glide
          glide install


    # Test the project
    - script:
        name: unit test
        code: |
          go test ./pkg/cohesioned $(glide novendor) --cover

    - script:
        name: install flyway cli
        code: |
          wget -O flyway.tgz https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/4.2.0/flyway-commandline-4.2.0-linux-x64.tar.gz
          tar -zxf flyway.tgz
          export PATH=./flyway-4.2.0/:$PATH
          flyway -version

    - script:
        name: integration test flyway db migration
        code: |
          ls -la $PWD/sql/

          flyway -user=root -password=$MYSQL_ENV_MYSQL_ROOT_PASSWORD -url=jdbc:mysql://$MYSQL_PORT_3306_TCP_ADDR:$MYSQL_PORT_3306_TCP_PORT/$MYSQL_ENV_MYSQL_DATABASE -locations=filesystem:$PWD/sql/ migrate

    - script:
        name: integration test
        code: |
          export AWS_REGION=$AWS_REGION

          export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
          export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
          export AWS_S3_VIDEO_BUCKET=$AWS_S3_VIDEO_BUCKET

          export AWS_RDS_USERNAME=$MYSQL_ENV_MYSQL_USER
          export AWS_RDS_PASSWORD=$MYSQL_ENV_MYSQL_PASSWORD
          export AWS_RDS_HOST=$MYSQL_PORT_3306_TCP_ADDR
          export AWS_RDS_PORT=$MYSQL_PORT_3306_TCP_PORT
          export AWS_RDS_DBNAME=$MYSQL_ENV_MYSQL_DATABASE

          go test ./pkg/cohesioned $(glide novendor) --cover -tags=integration
deploy:
  steps:
    - setup-go-workspace:
        package-dir: github.com/cohesion-education/api

    - script:
        name: glide install
        code: |
          go get -u github.com/Masterminds/glide
          glide install

    - script:
        name: go build
        code: |
          GOOS=linux GOARCH=amd64 go build -o ./build/cohesion-api ./cmd/srv
          ls -la ./build

    - script:
        name: install-cf-cli
        code: |
          wget -O cf.tgz https://cli.run.pivotal.io/stable?release=linux64-binary
          tar -zxf cf.tgz
          export PATH=.:$PATH
          cf version

    - script:
        name: install-autopilot-plugin
        code: |
          wget -O autopilot https://github.com/contraband/autopilot/releases/download/0.0.3/autopilot-linux
          chmod +x autopilot
          cf install-plugin autopilot -f

    - script:
        name: cf-login
        code: |
          cf login -a https://api.run.pivotal.io -u $CF_USER -p "$CF_PASS" -o cohesioned -s $CF_SPACE

    - script:
        name: cups-auth0
        code: |
          ./scripts/cups-auth0

    - script:
        name: cups-aws
        code: |
          ./scripts/cups-aws

    - script:
        name: gcp-keyfile
        code: |
          echo "$GCP_KEY" > ./build/gcp-keyfile.json

    - script:
        name: cf-push
        code: |
          cf zero-downtime-push api -f ${CF_SPACE}-manifest.yml
